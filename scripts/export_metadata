#!/usr/bin/python3
import argparse
from os import makedirs
from os.path import join, exists
from shutil import copyfile
import yaml
import sqlite3 as sql
import metadatakobo as mk


if __name__ == '__main__':
    ## parse arguments
    parser = argparse.ArgumentParser(description='export metadata to the Kobo database')
    parser.add_argument('-p', dest='path', help='path to working directory', default='./', type=str)
    parser.add_argument('-m', dest='metafile', help='metadata file (relative path from -p)', default='.metadata.yaml', type=str)
    parser.add_argument('-v', dest='volumes', help='ids of volumes to export (sequence of individual ids or ranges id1-id2)', default=None, type=str, nargs='*')
    parser.add_argument('-k', dest='kobopath', help='path to the Kobo device', default='/media/mjacquet/KOBORTIN', type=str)
    parser.add_argument('-d', dest='directory', help='target directory name on Kobo device', default='Mangas', type=str)
    args = parser.parse_args()

    ## load metadata
    meta = mk.CbzMeta(args.metafile)
    meta.load_yaml()

    serie = meta.data['name']
    author = meta.data['author']
    try:
        author = author + ', ' + meta.data['artist']
    except KeyError:
        pass
    publisher = meta.data['publisher']
    lang = meta.data['lang']
    description = '<div style="text-align: justify;">' + meta.data['synopsis'] + '<div>'
    volumes = meta.data['vol']
    is_oneshot = len(volumes.keys()) == 1

    if args.volumes:
        volumes_to_export = []
        for vol in args.volumes:
            if '-' in vol:
                v_start, v_end = vol.split('-')
                volumes_to_export += list(range(int(v_start), int(v_end)+1))
            else:
                try:
                    volumes_to_export += [int(vol)]
                except:
                    print('Skipping: %s is not a valid volume name')
    else:
        volumes_to_export = volumes.keys()

    ## copy all requested files to the Kobo device
    ## create the target directory on the Kobo (if not already there)
    try:
        makedirs(join(args.kobopath, args.directory))
    except FileExistsError:
        pass

    ## iterate over all volumes
    ignored = []
    for id in volumes_to_export:
        ## check if requested volume exist
        if id not in volumes:
            ignored += [id]
            print('Skipping: vol %s does not appear in the metadata.' % id)
            continue

        ## try to read the file field; if it fails, the entry is ignored
        try:
            file = volumes[id]['file']
        except KeyError:
            ignored += [id]
            print('Skipping: volume %s does not a valid path to the cbz.' % id)
            continue

        ## check if the file is already on the Kobo device
        if exists(join(args.kobopath, args.directory, file)):
            print('Skipping: %s already exists on Kobo device.' % file)
            continue

        ## import the file
        print('Importing %s' % file)
        try:
            copyfile(join(args.path, file), join(args.kobopath, args.directory, file))
        except FileNotFoundError:
            print('Skipping: %s does not exist.' % join(args.path, file))
            ignored += [id]
            continue

    for v in ignored:
        volumes_to_export.remove(v)

    ## ask for user to initialize the new files in database by disconnecting Kobo, and plug it back
    input(
        'All desired files has been copied on the Kobo device.\n'
        + 'Please unplug it and wait for the end of the importation, then plug it back.\n'
        + 'Press any key when the Kobo device is plugged and detected by the computer.'
    )

    ## import all the metadatas to the Kobo database
    ## connect to Kobo database
    kobo = mk.KoboDB(args.kobopath)
    kobo.connect()

    ## get volume metadata
    for id in volumes_to_export:
        vol = volumes[id]
        file = vol['file']

        ## find the Kobo contentID for the specified file
        contentID = kobo.book_from_filename(file)
        ## format title
        if is_oneshot:
            title = serie
        else:
            title = vol['name']
        ## add original title if applicable
        try:
            title = '%s (%s)' % (title, vol['original'])
        except KeyError:
            pass

        ## format date
        try:
            date = str(vol['date']).split('-')
            if len(date) == 3:  # metadata is day-month-year
                (d, m, y) = date
                date = mk.time_to_kobo(y, m, d)
            elif len(date) == 2:  # metadata is month-year
                (m, y) = date
                date = mk.time_to_kobo(y, m)
            else:  # metadata is year only
                date = date[0]
        except KeyError:
            date = 'unknown'

        ## export metadata
        print('Treating ' + file)
        if not is_oneshot:
            kobo.edit_book(contentID, title, author, publisher, lang, date, description, (serie, id))
        else:
            kobo.edit_book(contentID, title, author, publisher, lang, date, description)

    ## save the database and disconnect
    kobo.disconnect()
